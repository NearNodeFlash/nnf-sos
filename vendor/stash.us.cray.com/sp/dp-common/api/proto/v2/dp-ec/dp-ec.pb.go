//
// gRPC protocol buffer message descriptions for communications to Element Controllers
//
// Copyright 2019 Cray Inc.  All Rights Reserved

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: dp-ec.proto

package ecgrpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Request to create new task
type ECTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API versioning explicit to DP-API
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Who is making request
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Unique integer identifier of the task
	Id int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	// Human-friendly name of the task
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Original request URI
	Uri string `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	// Method requested
	Method string `protobuf:"bytes,6,opt,name=method,proto3" json:"method,omitempty"`
	// JSON message for the task
	JsonMsg string `protobuf:"bytes,7,opt,name=jsonMsg,proto3" json:"jsonMsg,omitempty"`
	// Date and time to remind the task
	Reminder *timestamp.Timestamp `protobuf:"bytes,8,opt,name=reminder,proto3" json:"reminder,omitempty"`
	// Time stamp for request
	Timestamp string `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ECTaskRequest) Reset() {
	*x = ECTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dp_ec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECTaskRequest) ProtoMessage() {}

func (x *ECTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dp_ec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECTaskRequest.ProtoReflect.Descriptor instead.
func (*ECTaskRequest) Descriptor() ([]byte, []int) {
	return file_dp_ec_proto_rawDescGZIP(), []int{0}
}

func (x *ECTaskRequest) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *ECTaskRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *ECTaskRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ECTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ECTaskRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ECTaskRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *ECTaskRequest) GetJsonMsg() string {
	if x != nil {
		return x.JsonMsg
	}
	return ""
}

func (x *ECTaskRequest) GetReminder() *timestamp.Timestamp {
	if x != nil {
		return x.Reminder
	}
	return nil
}

func (x *ECTaskRequest) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

// Contains data of created task
type ECTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API versioning explicit to DP-API
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// ID of created task
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Data from performing task
	JsonData string `protobuf:"bytes,3,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
}

func (x *ECTaskResponse) Reset() {
	*x = ECTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dp_ec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECTaskResponse) ProtoMessage() {}

func (x *ECTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dp_ec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECTaskResponse.ProtoReflect.Descriptor instead.
func (*ECTaskResponse) Descriptor() ([]byte, []int) {
	return file_dp_ec_proto_rawDescGZIP(), []int{1}
}

func (x *ECTaskResponse) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *ECTaskResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ECTaskResponse) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

var File_dp_ec_proto protoreflect.FileDescriptor

var file_dp_ec_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x64, 0x70, 0x2d, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65,
	0x63, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x0d, 0x45, 0x43, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x4e, 0x0a, 0x0e, 0x45, 0x43, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x32, 0x5a, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x65, 0x63,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x43, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x63, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x43, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x32,
	0x73, 0x74, 0x61, 0x73, 0x68, 0x2e, 0x75, 0x73, 0x2e, 0x63, 0x72, 0x61, 0x79, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x70, 0x2f, 0x64, 0x70, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x63, 0x67, 0x72,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dp_ec_proto_rawDescOnce sync.Once
	file_dp_ec_proto_rawDescData = file_dp_ec_proto_rawDesc
)

func file_dp_ec_proto_rawDescGZIP() []byte {
	file_dp_ec_proto_rawDescOnce.Do(func() {
		file_dp_ec_proto_rawDescData = protoimpl.X.CompressGZIP(file_dp_ec_proto_rawDescData)
	})
	return file_dp_ec_proto_rawDescData
}

var file_dp_ec_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dp_ec_proto_goTypes = []interface{}{
	(*ECTaskRequest)(nil),       // 0: ecgrpc.ECTaskRequest
	(*ECTaskResponse)(nil),      // 1: ecgrpc.ECTaskResponse
	(*timestamp.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_dp_ec_proto_depIdxs = []int32{
	2, // 0: ecgrpc.ECTaskRequest.reminder:type_name -> google.protobuf.Timestamp
	0, // 1: ecgrpc.ControllerService.ProcessTaskRequest:input_type -> ecgrpc.ECTaskRequest
	1, // 2: ecgrpc.ControllerService.ProcessTaskRequest:output_type -> ecgrpc.ECTaskResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_dp_ec_proto_init() }
func file_dp_ec_proto_init() {
	if File_dp_ec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dp_ec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dp_ec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dp_ec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dp_ec_proto_goTypes,
		DependencyIndexes: file_dp_ec_proto_depIdxs,
		MessageInfos:      file_dp_ec_proto_msgTypes,
	}.Build()
	File_dp_ec_proto = out.File
	file_dp_ec_proto_rawDesc = nil
	file_dp_ec_proto_goTypes = nil
	file_dp_ec_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerServiceClient interface {
	// Sends a task request to Element Controllers
	ProcessTaskRequest(ctx context.Context, in *ECTaskRequest, opts ...grpc.CallOption) (*ECTaskResponse, error)
}

type controllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerServiceClient(cc grpc.ClientConnInterface) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) ProcessTaskRequest(ctx context.Context, in *ECTaskRequest, opts ...grpc.CallOption) (*ECTaskResponse, error) {
	out := new(ECTaskResponse)
	err := c.cc.Invoke(ctx, "/ecgrpc.ControllerService/ProcessTaskRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServiceServer is the server API for ControllerService service.
type ControllerServiceServer interface {
	// Sends a task request to Element Controllers
	ProcessTaskRequest(context.Context, *ECTaskRequest) (*ECTaskResponse, error)
}

// UnimplementedControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (*UnimplementedControllerServiceServer) ProcessTaskRequest(context.Context, *ECTaskRequest) (*ECTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTaskRequest not implemented")
}

func RegisterControllerServiceServer(s *grpc.Server, srv ControllerServiceServer) {
	s.RegisterService(&_ControllerService_serviceDesc, srv)
}

func _ControllerService_ProcessTaskRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ECTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).ProcessTaskRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecgrpc.ControllerService/ProcessTaskRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).ProcessTaskRequest(ctx, req.(*ECTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ecgrpc.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTaskRequest",
			Handler:    _ControllerService_ProcessTaskRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dp-ec.proto",
}
