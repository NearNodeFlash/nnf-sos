/*
 * Swordfish API
 *
 * This contains the definition of the Swordfish extensions to a Redfish service.
 *
 * API version: v1.2.c
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

// SensorV111Sensor - The Sensor schema describes a sensor and its properties.
type SensorV111Sensor struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	// The estimated percent error of measured versus actual values.
	Accuracy *float32 `json:"Accuracy,omitempty"`

	Actions SensorV111Actions `json:"Actions,omitempty"`

	// The adjusted maximum allowable operating value for this equipment based on the environmental conditions.
	AdjustedMaxAllowableOperatingValue *float32 `json:"AdjustedMaxAllowableOperatingValue,omitempty"`

	// The adjusted minimum allowable operating value for this equipment based on the environmental conditions.
	AdjustedMinAllowableOperatingValue *float32 `json:"AdjustedMinAllowableOperatingValue,omitempty"`

	// The product of voltage and current for an AC circuit, in Volt-Ampere units.
	ApparentVA *float32 `json:"ApparentVA,omitempty"`

	// The crest factor for this sensor.
	CrestFactor *float32 `json:"CrestFactor,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	ElectricalContext SensorElectricalContext `json:"ElectricalContext,omitempty"`

	// The identifier that uniquely identifies the resource within the collection of similar resources.
	Id string `json:"Id"`

	Implementation SensorV111ImplementationType `json:"Implementation,omitempty"`

	// The total accumulation value for this sensor.
	LifetimeReading *float32 `json:"LifetimeReading,omitempty"`

	// The power load utilization for this sensor.
	LoadPercent *float32 `json:"LoadPercent,omitempty"`

	Location ResourceLocation `json:"Location,omitempty"`

	// The maximum allowable operating value for this equipment.
	MaxAllowableOperatingValue *float32 `json:"MaxAllowableOperatingValue,omitempty"`

	// The minimum allowable operating value for this equipment.
	MinAllowableOperatingValue *float32 `json:"MinAllowableOperatingValue,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	// The peak sensor value.
	PeakReading *float32 `json:"PeakReading,omitempty"`

	// The time when the peak sensor value occurred.
	PeakReadingTime *time.Time `json:"PeakReadingTime,omitempty"`

	PhysicalContext PhysicalContextPhysicalContext `json:"PhysicalContext,omitempty"`

	PhysicalSubContext PhysicalContextPhysicalSubContext `json:"PhysicalSubContext,omitempty"`

	// The power factor for this sensor.
	PowerFactor *float32 `json:"PowerFactor,omitempty"`

	// The number of significant digits in the reading.
	Precision *float32 `json:"Precision,omitempty"`

	// The square root of the difference term of squared ApparentVA and squared Power (Reading) for a circuit, in var units.
	ReactiveVAR *float32 `json:"ReactiveVAR,omitempty"`

	// The sensor value.
	Reading *float32 `json:"Reading,omitempty"`

	// The maximum possible value for this sensor.
	ReadingRangeMax *float32 `json:"ReadingRangeMax,omitempty"`

	// The minimum possible value for this sensor.
	ReadingRangeMin *float32 `json:"ReadingRangeMin,omitempty"`

	// The date and time that the reading was acquired from the sensor.
	ReadingTime *time.Time `json:"ReadingTime,omitempty"`

	ReadingType SensorV111ReadingType `json:"ReadingType,omitempty"`

	// The units of the reading and thresholds.
	ReadingUnits string `json:"ReadingUnits,omitempty"`

	// The time interval between readings of the physical sensor.
	SensingFrequency *float32 `json:"SensingFrequency,omitempty"`

	// The time interval between readings of the sensor.
	SensingInterval string `json:"SensingInterval,omitempty"`

	// The date and time when the time-based properties were last reset.
	SensorResetTime *time.Time `json:"SensorResetTime,omitempty"`

	Status ResourceStatus `json:"Status,omitempty"`

	// The total harmonic distortion (THD).
	THDPercent *float32 `json:"THDPercent,omitempty"`

	Thresholds SensorV111Thresholds `json:"Thresholds,omitempty"`

	VoltageType SensorVoltageType `json:"VoltageType,omitempty"`
}
