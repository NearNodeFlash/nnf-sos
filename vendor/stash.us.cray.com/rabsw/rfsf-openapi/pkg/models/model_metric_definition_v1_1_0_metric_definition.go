/*
 * Swordfish API
 *
 * This contains the definition of the Swordfish extensions to a Redfish service.
 *
 * API version: v1.2.c
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// MetricDefinitionV110MetricDefinition - The MetricDefinition schema describes the metadata information for a metric.
type MetricDefinitionV110MetricDefinition struct {

	// The OData description of a payload.
	OdataContext string `json:"@odata.context,omitempty"`

	// The current ETag of the resource.
	OdataEtag string `json:"@odata.etag,omitempty"`

	// The unique identifier for a resource.
	OdataId string `json:"@odata.id"`

	// The type of a resource.
	OdataType string `json:"@odata.type"`

	// The estimated percent error of measured versus actual values.
	Accuracy *float32 `json:"Accuracy,omitempty"`

	Actions MetricDefinitionV110Actions `json:"Actions,omitempty"`

	Calculable MetricDefinitionV110Calculable `json:"Calculable,omitempty"`

	CalculationAlgorithm MetricDefinitionV110CalculationAlgorithmEnum `json:"CalculationAlgorithm,omitempty"`

	// The metric properties that are part of a calculation.
	CalculationParameters []MetricDefinitionV110CalculationParamsType `json:"CalculationParameters,omitempty"`

	// The time interval over which the metric calculation is performed.
	CalculationTimeInterval string `json:"CalculationTimeInterval,omitempty"`

	// The calibration offset added to the metric reading.
	Calibration *float32 `json:"Calibration,omitempty"`

	// The description of this resource.  Used for commonality in the schema definitions.
	Description string `json:"Description,omitempty"`

	// This array property specifies possible values of a discrete metric.
	DiscreteValues []string `json:"DiscreteValues,omitempty"`

	// The identifier that uniquely identifies the resource within the collection of similar resources.
	Id string `json:"Id"`

	Implementation MetricDefinitionV110ImplementationType `json:"Implementation,omitempty"`

	// An indication of whether the metric values are linear versus non-linear.
	IsLinear bool `json:"IsLinear,omitempty"`

	// Maximum value for metric reading.
	MaxReadingRange *float32 `json:"MaxReadingRange,omitempty"`

	MetricDataType MetricDefinitionV110MetricDataType `json:"MetricDataType,omitempty"`

	// The list of URIs with wildcards and property identifiers that this metric definition defines.  If a URI has wildcards, the wildcards are substituted as specified in the Wildcards array property.
	MetricProperties []string `json:"MetricProperties,omitempty"`

	MetricType MetricDefinitionV110MetricType `json:"MetricType,omitempty"`

	// Minimum value for metric reading.
	MinReadingRange *float32 `json:"MinReadingRange,omitempty"`

	// The name of the resource or array member.
	Name string `json:"Name"`

	// The OEM-defined calculation that is performed on a source metric to obtain the metric being defined.
	OEMCalculationAlgorithm string `json:"OEMCalculationAlgorithm,omitempty"`

	// The OEM extension.
	Oem map[string]interface{} `json:"Oem,omitempty"`

	PhysicalContext PhysicalContextPhysicalContext `json:"PhysicalContext,omitempty"`

	// Number of significant digits in the metric reading.
	Precision int64 `json:"Precision,omitempty"`

	// The time interval between when a metric is updated.
	SensingInterval string `json:"SensingInterval,omitempty"`

	// The accuracy of the timestamp.
	TimestampAccuracy string `json:"TimestampAccuracy,omitempty"`

	// The units of measure for this metric.
	Units string `json:"Units,omitempty"`

	// The wildcards and their substitution values for the entries in the MetricProperties array property.
	Wildcards []MetricDefinitionV110Wildcard `json:"Wildcards,omitempty"`
}
