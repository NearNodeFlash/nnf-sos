
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: nnfstorages.nnf.cray.hpe.com
spec:
  group: nnf.cray.hpe.com
  names:
    kind: NnfStorage
    listKind: NnfStorageList
    plural: nnfstorages
    singular: nnfstorage
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Storage is the Schema for the storages API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: 'NnfStorageSpec defines the specification for requesting
              generic storage on a set of available NNF Nodes. This object is related
              to a #DW for NNF Storage, with the WLM making the determination for
              which NNF Nodes it wants to untilize.'
            properties:
              capacity:
                description: Capacity defines the desired size, in bytes, of storage
                  allocation for each NNF Node listed by the storage specification.
                  The allocated capacity may be larger to meet underlying storage
                  requirements (i.e. allocated capacity may round up to a multiple
                  of the stripe size)
                format: int64
                type: integer
              nodes:
                description: Nodes define the list of NNF Nodes that will be the source
                  of storage provisioning and the servers that can utilize the storage
                items:
                  description: NnfStorageNodeSpec defines the desired state of an
                    individual NNF Node within the NNF Storage Specification.
                  properties:
                    capacity:
                      description: Capacity defines the capacity, in bytes, of this
                        storage specification. The NNF Node itself may split the storage
                        among the available drives operating in the NNF Node.
                      format: int64
                      type: integer
                    fileSystemName:
                      description: FileSystem defines the desired file system that
                        is to be established for this Storage specification.
                      maxLength: 8
                      type: string
                    fileSystemType:
                      default: raw
                      description: FileSystemType defines the type of the desired
                        filesystem, or raw block device.
                      enum:
                      - raw
                      - lvm
                      - zfs
                      - lustre
                      type: string
                    lustreStorage:
                      description: LustreStorageSpec describes the Lustre target created
                        here, if FileSystemType specifies a Lustre target.
                      properties:
                        index:
                          description: Index is used to order a series of MDTs or
                            OSTs.  This is used only when creating MDT and OST targets.
                          minimum: 0
                          type: integer
                        mgsNode:
                          description: MgsNode is the NID of the MGS to use. This
                            is used only when creating MDT and OST targets.
                          type: string
                        targetType:
                          description: TargetType is the type of Lustre target to
                            be created.
                          enum:
                          - MGT
                          - MDT
                          - OST
                          type: string
                      required:
                      - targetType
                      type: object
                    node:
                      description: Node specifies the target NNF Node that will host
                        the storage requested by the specification. Duplicate names
                        within the parent's list of nodes is not allowed.
                      type: string
                    owner:
                      description: Owner points to the NNF Storage that owns this
                        NNF Node Storage.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                    servers:
                      description: Servers is a list of NNF connected Servers that
                        are to receive this NNF Storage resource. A valid server will
                        receive the physical storage that has been allocated via raw
                        block or the desired file system.
                      items:
                        description: NNF Node Storage Server Spec defines the desired
                          server state for a given NNF Storage specification.
                        properties:
                          id:
                            description: Id defines the NNF Node unique identifier
                              for this NNF Server resource. A valid Id field will
                              receive the storage allocated by the parent NNF Storage
                              specification.
                            type: string
                          name:
                            description: 'Name defines the name of the NNF Server
                              resource. If provided, the name is validated against
                              the supplied Id. Can be used to identify a NNF Server
                              resource by a human-readable value. TODO: Validate name/id
                              pair in nnf_node_controller.go'
                            type: string
                          path:
                            description: Path defines an option path for which the
                              resource is made available on the NNF Server resource.
                              A valid path must adhear to the system's directory name
                              rules and conventions and cannot already exist on the
                              system. The path is analogous to the mountpoint of the
                              file system.
                            type: string
                        type: object
                      type: array
                  required:
                  - fileSystemType
                  - node
                  type: object
                type: array
              uuid:
                description: Uuid defines the unique identifier for this storage specification.
                  Can be any value specified by the user, but must be unique against
                  all existing storage specifications.
                type: string
              workflowReference:
                description: Workflow reference records the workflow that created
                  this NnfStorage
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of
                      an entire object, this string should contain a valid JSON/Go
                      field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within
                      a pod, this would take on a value like: "spec.containers{name}"
                      (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]"
                      (container with index 2 in this pod). This syntax is chosen
                      only to have some well-defined way of referencing a part of
                      an object. TODO: this design is not final and this field is
                      subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
            required:
            - capacity
            type: object
          status:
            description: NnfStorageStatus defines the observed status of NNF Storage.
            properties:
              health:
                description: Health reflects the health of this NNF Storage
                type: string
              nodes:
                description: Nodes defines status of inidividual NNF Nodes that are
                  managed by the parent NNF Storage specification. Each node in the
                  specification has a companion status element of the same name.
                items:
                  description: NnfStorageNodeStatus defines the observed status of
                    a storage present on one particular NNF Node defined within the
                    specifiction. Each NNF Storage Node Status shall have a corresponding
                    NNF Storage Node Spec with equivalent Name field. This creates
                    a Spec-Status pair for inspecting elements.
                  properties:
                    capacityAllocated:
                      description: Total capacity allocated for the storage. This
                        may differ than the requested storage capacity as the system
                        may round up to the requested capacity satisifiy underlying
                        storage requirements (i.e. block size / stripe size).
                      format: int64
                      type: integer
                    capacityUsed:
                      description: Represents the used capacity. This is an aggregation
                        of all the used capacities of the underlying storage objects.
                      format: int64
                      type: integer
                    conditions:
                      items:
                        description: "Condition contains details for one aspect of
                          the current state of this API Resource. --- This struct
                          is intended for direct use as an array at the field path
                          .status.conditions.  For example, type FooStatus struct{
                          \    // Represents the observations of a foo's current state.
                          \    // Known .status.conditions.type are: \"Available\",
                          \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                          \    // +patchStrategy=merge     // +listType=map     //
                          +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\"
                          patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                          \n     // other fields }"
                        properties:
                          lastTransitionTime:
                            description: lastTransitionTime is the last time the condition
                              transitioned from one status to another. This should
                              be when the underlying condition changed.  If that is
                              not known, then using the time when the API field changed
                              is acceptable.
                            format: date-time
                            type: string
                          message:
                            description: message is a human readable message indicating
                              details about the transition. This may be an empty string.
                            maxLength: 32768
                            type: string
                          observedGeneration:
                            description: observedGeneration represents the .metadata.generation
                              that the condition was set based upon. For instance,
                              if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration
                              is 9, the condition is out of date with respect to the
                              current state of the instance.
                            format: int64
                            minimum: 0
                            type: integer
                          reason:
                            description: reason contains a programmatic identifier
                              indicating the reason for the condition's last transition.
                              Producers of specific condition types may define expected
                              values and meanings for this field, and whether the
                              values are considered a guaranteed API. The value should
                              be a CamelCase string. This field may not be empty.
                            maxLength: 1024
                            minLength: 1
                            pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                            type: string
                          status:
                            description: status of the condition, one of True, False,
                              Unknown.
                            enum:
                            - "True"
                            - "False"
                            - Unknown
                            type: string
                          type:
                            description: type of condition in CamelCase or in foo.example.com/CamelCase.
                              --- Many .condition.type values are consistent across
                              resources like Available, but because arbitrary conditions
                              can be useful (see .node.status.conditions), the ability
                              to deconflict is important. The regex it matches is
                              (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                            maxLength: 316
                            pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                            type: string
                        required:
                        - lastTransitionTime
                        - message
                        - reason
                        - status
                        - type
                        type: object
                      type: array
                    creationTime:
                      description: Represents the time when the storage was created
                        by the controller It is represented in RFC3339 form and is
                        in UTC.
                      format: date-time
                      type: string
                    deletionTime:
                      description: Represents the time when the storage was deleted
                        by the controller. This field is updated when the Storage
                        specification State transitions to 'Delete' by the client.
                        It is represented in RFC3339 form and is in UTC.
                      format: date-time
                      type: string
                    health:
                      description: NnfResourceHealthType defines the health of an
                        NNF resource.
                      type: string
                    id:
                      description: Id reflects the NNF Node unique identifier for
                        this NNF Server resource.
                      type: string
                    lustreStorage:
                      description: LustreStorageStatus describes the Lustre target
                        created here.
                      properties:
                        nid:
                          description: Nid (LNet Network Identifier) of this node.
                            This is populated on MGS nodes only.
                          type: string
                      type: object
                    name:
                      description: Name reflects the common name of this NNF Server
                        resource.
                      type: string
                    node:
                      description: Node specifies the target NNF Node that will host
                        the storage requested by the specification. Duplicate names
                        within the parent's list of nodes is not allowed.
                      type: string
                    servers:
                      items:
                        properties:
                          fileShare:
                            description: Represents the file share that is supporting
                              this server. A file share is the combination of a storage
                              group and the associated file system parameters (type,
                              mountpoint) that makes up the available storage.
                            properties:
                              health:
                                description: NnfResourceHealthType defines the health
                                  of an NNF resource.
                                type: string
                              id:
                                description: Id reflects the NNF Node unique identifier
                                  for this NNF Server resource.
                                type: string
                              name:
                                description: Name reflects the common name of this
                                  NNF Server resource.
                                type: string
                              status:
                                type: string
                            type: object
                          health:
                            description: NnfResourceHealthType defines the health
                              of an NNF resource.
                            type: string
                          id:
                            description: Id reflects the NNF Node unique identifier
                              for this NNF Server resource.
                            type: string
                          name:
                            description: Name reflects the common name of this NNF
                              Server resource.
                            type: string
                          status:
                            type: string
                          storageGroup:
                            description: Represents the storage group that is supporting
                              this server. A storage group is the mapping from a group
                              of drive namespaces to an individual server. This value
                              can be safely ignored by the client.
                            properties:
                              health:
                                description: NnfResourceHealthType defines the health
                                  of an NNF resource.
                                type: string
                              id:
                                description: Id reflects the NNF Node unique identifier
                                  for this NNF Server resource.
                                type: string
                              name:
                                description: Name reflects the common name of this
                                  NNF Server resource.
                                type: string
                              status:
                                type: string
                            type: object
                        type: object
                      type: array
                    status:
                      type: string
                    uuid:
                      description: Reflects the unique identifier for the storage.
                        When a storage spec is received the controller will create
                        a status object with the same UUID.
                      type: string
                  required:
                  - node
                  type: object
                type: array
              status:
                description: Status reflects the status of this NNF Storage
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
