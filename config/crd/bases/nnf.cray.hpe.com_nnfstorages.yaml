
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: nnfstorages.nnf.cray.hpe.com
spec:
  group: nnf.cray.hpe.com
  names:
    kind: NnfStorage
    listKind: NnfStorageList
    plural: nnfstorages
    singular: nnfstorage
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: NnfStorage is the Schema for the storages API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: 'NnfStorageSpec defines the specification for requesting
              generic storage on a set of available NNF Nodes. This object is related
              to a #DW for NNF Storage, with the WLM making the determination for
              which NNF Nodes it wants to utilize.'
            properties:
              allocationSets:
                description: AllocationSets is a list of different types of storage
                  allocations to make. Each AllocationSet describes an entire allocation
                  spanning multiple Rabbits. For example, an AllocationSet could be
                  all of the OSTs in a Lustre filesystem, or all of the raw block
                  devices in a raw block configuration.
                items:
                  description: NnfStorageAllocationSetSpec defines the details for
                    an allocation set
                  properties:
                    backFs:
                      description: BackFs is the type of backing filesystem to use.
                      enum:
                      - ldiskfs
                      - zfs
                      type: string
                    capacity:
                      description: Capacity defines the capacity, in bytes, of this
                        storage specification. The NNF Node itself may split the storage
                        among the available drives operating in the NNF Node.
                      format: int64
                      type: integer
                    fileSystemName:
                      description: FileSystemName is the fsname parameter for the
                        Lustre filesystem.
                      maxLength: 8
                      type: string
                    fileSystemType:
                      default: raw
                      description: FileSystemType defines the type of the desired
                        filesystem, or raw block device.
                      enum:
                      - raw
                      - lvm
                      - zfs
                      - lustre
                      - xfs
                      type: string
                    name:
                      description: Name is a human readable label for this set of
                        allocations (e.g., xfs)
                      type: string
                    nodes:
                      description: Nodes is the list of Rabbit nodes to make allocations
                        on
                      items:
                        description: NnfStorageAllocationNodes identifies the node
                          and properties of the allocation to make on that node
                        properties:
                          count:
                            description: Number of allocations to make on this node
                            type: integer
                          name:
                            description: Name of the node to make the allocation on
                            type: string
                        required:
                        - count
                        - name
                        type: object
                      type: array
                    targetType:
                      description: TargetType is the type of Lustre target to be created.
                      enum:
                      - MGT
                      - MDT
                      - OST
                      type: string
                  required:
                  - capacity
                  - fileSystemType
                  - name
                  - nodes
                  type: object
                type: array
            required:
            - allocationSets
            type: object
          status:
            description: NnfStorageStatus defines the observed status of NNF Storage.
            properties:
              allocationSets:
                description: AllocationsSets holds the status information for each
                  of the AllocationSets from the spec.
                items:
                  description: NnfStorageAllocationSetStatus contains the status information
                    for an allocation set
                  properties:
                    allocationCount:
                      description: AllocationCount is the total number of allocations
                        that currently exist
                      type: integer
                    health:
                      description: Health reflects the health of this NNF Storage
                      type: string
                    nodeStorageReferences:
                      description: NodeStorageReferences is the list of object references
                        to the child NnfNodeStorage resources
                      items:
                        description: 'ObjectReference contains enough information
                          to let you inspect or modify the referred object. --- New
                          uses of this type are discouraged because of difficulty
                          describing its usage when embedded in APIs.  1. Ignored
                          fields.  It includes many fields which are not generally
                          honored.  For instance, ResourceVersion and FieldPath are
                          both very rarely valid in actual usage.  2. Invalid usage
                          help.  It is impossible to add specific help for individual
                          usage.  In most embedded usages, there are particular     restrictions
                          like, "must refer only to types A and B" or "UID not honored"
                          or "name must be restricted".     Those cannot be well described
                          when embedded.  3. Inconsistent validation.  Because the
                          usages are different, the validation rules are different
                          by usage, which makes it hard for users to predict what
                          will happen.  4. The fields are both imprecise and overly
                          precise.  Kind is not a precise mapping to a URL. This can
                          produce ambiguity     during interpretation and require
                          a REST mapping.  In most cases, the dependency is on the
                          group,resource tuple     and the version of the actual struct
                          is irrelevant.  5. We cannot easily change it.  Because
                          this type is embedded in many locations, updates to this
                          type     will affect numerous schemas.  Don''t make new
                          APIs embed an underspecified API type they do not control.
                          Instead of using this type, create a locally provided and
                          used type that is well-focused on your reference. For example,
                          ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                          .'
                        properties:
                          apiVersion:
                            description: API version of the referent.
                            type: string
                          fieldPath:
                            description: 'If referring to a piece of an object instead
                              of an entire object, this string should contain a valid
                              JSON/Go field access statement, such as desiredState.manifest.containers[2].
                              For example, if the object reference is to a container
                              within a pod, this would take on a value like: "spec.containers{name}"
                              (where "name" refers to the name of the container that
                              triggered the event) or if no container name is specified
                              "spec.containers[2]" (container with index 2 in this
                              pod). This syntax is chosen only to have some well-defined
                              way of referencing a part of an object. TODO: this design
                              is not final and this field is subject to change in
                              the future.'
                            type: string
                          kind:
                            description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                          namespace:
                            description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                            type: string
                          resourceVersion:
                            description: 'Specific resourceVersion to which this reference
                              is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                            type: string
                          uid:
                            description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                            type: string
                        type: object
                      type: array
                    reason:
                      description: Reason is the human readable reason for the status
                      type: string
                    status:
                      description: Status reflects the status of this NNF Storage
                      type: string
                  required:
                  - allocationCount
                  - nodeStorageReferences
                  type: object
                type: array
              mgsNode:
                description: MgsNode is the NID of the MGS.
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
